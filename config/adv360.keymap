#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/stp.h>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/pointing.h>

// Layers
#define DEFAULT 0
#define WINDOW 1
#define ARROWS 2
#define MOD 3

// Special keys
#define HYPER(key) LA(LC(LG(LS(key))))
#define MEH(key) LA(LC(LS(key)))

// Key positions
// 0  1  2  3  4  5  6                           7  8  9  10 11 12 13
// 14 15 16 17 18 19 20                          21 22 23 24 25 26 27
// 28 29 30 31 32 33 34      35 36   37 38       39 40 41 42 43 44 45
// 46 47 48 49 50 51            52   53             54 55 56 57 58 59
// 60 61 62 63 64         65 66 67   68 69 70          71 72 73 74 75
/ {
  behaviors {
    #include "macros.dtsi"
    #include "version.dtsi"

    dm: dual_mod_key {
      compatible = "zmk,behavior-hold-tap";
      label = "DUAL_MOD_KEY";
      #binding-cells = <2>;
      flavor = "tap-preferred";
      tapping-term-ms = <180>;
      quick-tap-ms = <125>;
      bindings = <&kp>, <&kp>;
    };
  };
  keymap {
    compatible = "zmk,keymap";

    default_layer {
      display-name = "Base";
      bindings = <
        &none           &kp N1        &kp N2       &kp N3          &kp N4       &kp N5   &mo MOD                                                                                                    &mo MOD            &kp N6   &kp N7      &kp N8      &kp N9     &kp N0     &none
        &kp TAB         &kp Q         &kp W        &kp E           &kp R        &kp T    &none                                                                                                      &none              &kp Y    &kp U       &kp I       &kp O      &kp P      &kp BSLH
        &kp CAPS        &kp A         &kp S        &kp D           &kp F        &kp G    &kp LS(LC(LG(LALT)))               &kp LG(LA(C))   &kp LG(LS(V))       &kp LA(M)    &none                  &kp LS(LC(LALT))   &kp H    &kp J       &kp K       &kp L      &kp SEMI   &kp SQT
        &kp LSHFT       &dm LCTRL Z   &dm LALT X   &kp C           &kp V        &kp B                                                       &kp LC(LG(SPACE))   &kp LG(N6)                                             &kp N    &kp M       &kp COMMA   &kp DOT    &kp FSLH   &kp RSHFT
        &kp LS(LC(T))   &kp GRAVE     &none        &kp LG(SPACE)   &mo ARROWS                                   &kp SPACE   &kp LGUI        &mo WINDOW          &mo WINDOW   &kp ENTER   &kp BSPC                               &kp MINUS   &kp EQUAL   &kp LBKT   &kp RBKT   &kp RCTRL
      >;
    };
    window {
      display-name = "Window";
      bindings = <
        &none   &kp F1          &kp F2             &kp F3          &kp F4              &kp F5           &none                                                     &kp C_VOL_UP   &kp F6          &kp F7          &kp F8              &kp F9            &kp F10            &none
        &none   &none           &none              &none           &none               &none            &none                                                     &kp C_VOL_DN   &kp LG(LC(Y))   &kp LG(LC(U))   &kp LG(LC(I))       &kp LG(LC(O))     &kp LG(LC(P))      &none
        &none   &kp MEH(LEFT)   &kp LG(LA(LEFT))   &kp LG(LA(F))   &kp LG(LA(RIGHT))   &kp MEH(RIGHT)   &none           &none   &none    &none    &none           &none          &kp LG(LC(H))   &kp LG(LC(J))   &kp LG(LC(K))       &kp LG(LC(L))     &kp LG(LC(SEMI))   &none
        &none   &none           &none              &none           &kp LG(LA(I))       &none                                    &none    &none                                   &kp LG(LC(N))   &kp LG(LC(M))   &kp LG(LC(COMMA))   &kp LG(LC(DOT))   &kp LG(LC(FSLH))   &none
        &none   &none           &none              &none           &none                                        &none   &none   &trans   &trans   &none   &none                                  &none           &none               &none             &none              &none
      >;
    };
    arrows {
      display-name = "Arrows";
      bindings = <
        &none   &none   &none   &none   &none    &none   &none                                                   &none   &none          &none          &none        &none              &none              &none
        &none   &none   &none   &none   &none    &none   &none                                                   &none   &kp LG(LEFT)   &kp LG(DOWN)   &kp LG(UP)   &kp LG(RIGHT)      &kp LA(LS(UP))     &none
        &none   &none   &none   &none   &none    &none   &none           &none   &none   &none   &none           &none   &kp LEFT       &kp DOWN       &kp UP       &kp RIGHT          &kp LG(LS(T))      &none
        &none   &none   &none   &none   &none    &none                           &none   &none                           &kp LA(LEFT)   &kp LA(DOWN)   &kp LA(UP)   &kp LA(RIGHT)      &kp LA(LS(DOWN))   &none
        &none   &none   &none   &none   &trans                   &none   &none   &none   &none   &none   &none                          &none          &none        &kp LG(LS(LBKT))   &kp LG(LS(RBKT))   &none
      >;
    };
    mod {
      display-name = "Mod";
      bindings = <
        &none   &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4   &trans                                                                   &trans         &none   &none   &none   &none   &none   &none
        &none   &none          &none          &none          &none          &none          &bootloader                                                              &bootloader    &none   &none   &none   &none   &none   &none
        &none   &none          &none          &none          &none          &none          &kp LG(LA(C_PWR))           &none   &none   &none   &bt BT_CLR           &stp STP_BAT   &none   &none   &none   &none   &none   &none
        &none   &none          &none          &none          &macro_ver     &none                                              &none   &none                                       &none   &none   &none   &none   &none   &none
        &none   &none          &none          &none          &none                                             &none   &none   &none   &none   &none        &none                          &none   &none   &none   &none   &none
      >;
    };
    extra1 {
      display-name = "Red";
      status = "reserved";
    };
    extra2 {
      display-name = "Purple";
      status = "reserved";
    };
    extra3 {
      display-name = "Cyan";
      status = "reserved";
    };
    extra4 {
      display-name = "Yellow";
      status = "reserved";
    };
  };
};
